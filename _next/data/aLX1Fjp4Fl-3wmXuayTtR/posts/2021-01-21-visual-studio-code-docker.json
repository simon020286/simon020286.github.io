{"pageProps":{"source":"\nCiao a tutti,  \noggi vi mostro il mio ambiente di sviluppo, programmi, linguaggi e tools che utilizzo.  \nPer prima cosa come IDE (Integrated development environment) utilizzo l'ottimo Visual Studio Code di Microsoft.  \nTrovate tutte le informazioni [qui](https://code.visualstudio.com/).  \nIn breve è un software multi-piattaforma, infatti lo trovate per Windows, MacOS e Linux, integra il controllo della versione del codice tramite git, esistono un'infinità di estensioni per facilitare lo sviluppo.\n\n![visual studio code](https://res.cloudinary.com/drg2utgxr/image/upload/v1611249440/posts/vcode/home-screenshot-win-lg_vzx2kh.png 'Visual Studio Code')\n\nGrazie alle tantissime estensioni disponibili è possibile programmare in qualsiasi linguaggio, ma in questo articolo vedremo come sviluppare in golang, sfruttando un container docker in cui installare il compilatore e tutto il necessario in modo da non \"sporcare\" il computer host.\n\nI prerequisti sono pochissimi, aver installato Docker, Visual Studio Code e l'estensione Remote - Containers.\nFatto questo basterà creare la cartella del proprio progetto e al suo interno una cartella chiamata _.devcontainer,_  \nall'interno di essa i seguenti file:\n\n_Dockerfile_\n\n```dockerfile\nFROM golang:1.16\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n    && apt-get -y install --no-install-recommends apt-utils 2>&1\n\n# Verify git, process tools, lsb-release (common in install instructions for CLIs) installed.\nRUN apt-get -y install git iproute2 procps lsb-release\n\n# Install Go tools.\nRUN go env -w GO111MODULE=off \\\n    && apt-get update \\\n    # Install gocode-gomod.\n    && go get -x -d github.com/stamblerre/gocode 2>&1 \\\n    && go build -o gocode-gomod github.com/stamblerre/gocode \\\n    && mv gocode-gomod $GOPATH/bin/ \\\n    # Install other tools.\n    && go get -u \\\n        golang.org/x/tools/gopls \\\n        github.com/stamblerre/gocode \\\n        github.com/uudashr/gopkgs/cmd/gopkgs \\\n        github.com/ramya-rao-a/go-outline \\\n        github.com/acroca/go-symbols \\\n        golang.org/x/tools/cmd/guru \\\n        golang.org/x/tools/cmd/gorename \\\n        github.com/go-delve/delve/cmd/dlv \\\n        github.com/stamblerre/gocode \\\n        github.com/rogpeppe/godef \\\n        golang.org/x/tools/cmd/goimports 2>&1 \\\n    # Clean up.\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && go env -w GO111MODULE=on\n\n# Revert workaround at top layer.\nENV DEBIAN_FRONTEND=dialog\n\n# Expose service ports.\nEXPOSE 8000\n```\n\n_devcontainer.json_\n\n```json\n{\n  \"dockerFile\": \"./Dockerfile\",\n  \"appPort\": [\"8000:8000\"],\n  \"extensions\": [\"golang.go\"]\n}\n```\n\nFatto questo Visual Studio Code ti chiederà se vuoi aprire il workspace all'interno del container, rispondere di si e attendere che docker crei il container. Probabilmente alla fine del processo vi verrà suggerito di installare alcuni tool di golang, accettate e proseguite.  \nDopo qualche secondo sarà possibile iniziare a sviluppare normalmente.  \nLa cosa bella di questo processo è che i file che scriverete saranno fisicamente sul sistema host, quindi navigabili e gestibile dal file manager, ma tutte le librerie e eseguibili di go saranno all'interno del container.  \nQuesto rende più semplice la gestione delle varie versione di golang e delle dipendenze dei propri progetti.  \nOvviamente tutto questo è possibile utilizzarlo per molti linguaggi di programmazione ad esempio Python, Flutter, C# e molti altri.\n\nSpero di avervi aiutato e fatto scoprire qualcosa di nuovo.  \nCome al solito contattatemi pure nei commenti se avete bisogno di aiuto.\n","post":{"slug":"2021-01-21-visual-studio-code-docker","title":"Visual Studio Code - Docker","date":"2021-08-06","description":"Sviluppare con Visual Studio Code all'interno di un container Docker","image":null,"tags":["visual studio code","ide","docker"],"content":"\nCiao a tutti,  \noggi vi mostro il mio ambiente di sviluppo, programmi, linguaggi e tools che utilizzo.  \nPer prima cosa come IDE (Integrated development environment) utilizzo l'ottimo Visual Studio Code di Microsoft.  \nTrovate tutte le informazioni [qui](https://code.visualstudio.com/).  \nIn breve è un software multi-piattaforma, infatti lo trovate per Windows, MacOS e Linux, integra il controllo della versione del codice tramite git, esistono un'infinità di estensioni per facilitare lo sviluppo.\n\n![visual studio code](https://res.cloudinary.com/drg2utgxr/image/upload/v1611249440/posts/vcode/home-screenshot-win-lg_vzx2kh.png 'Visual Studio Code')\n\nGrazie alle tantissime estensioni disponibili è possibile programmare in qualsiasi linguaggio, ma in questo articolo vedremo come sviluppare in golang, sfruttando un container docker in cui installare il compilatore e tutto il necessario in modo da non \"sporcare\" il computer host.\n\nI prerequisti sono pochissimi, aver installato Docker, Visual Studio Code e l'estensione Remote - Containers.\nFatto questo basterà creare la cartella del proprio progetto e al suo interno una cartella chiamata _.devcontainer,_  \nall'interno di essa i seguenti file:\n\n_Dockerfile_\n\n```dockerfile\nFROM golang:1.16\n\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n    && apt-get -y install --no-install-recommends apt-utils 2>&1\n\n# Verify git, process tools, lsb-release (common in install instructions for CLIs) installed.\nRUN apt-get -y install git iproute2 procps lsb-release\n\n# Install Go tools.\nRUN go env -w GO111MODULE=off \\\n    && apt-get update \\\n    # Install gocode-gomod.\n    && go get -x -d github.com/stamblerre/gocode 2>&1 \\\n    && go build -o gocode-gomod github.com/stamblerre/gocode \\\n    && mv gocode-gomod $GOPATH/bin/ \\\n    # Install other tools.\n    && go get -u \\\n        golang.org/x/tools/gopls \\\n        github.com/stamblerre/gocode \\\n        github.com/uudashr/gopkgs/cmd/gopkgs \\\n        github.com/ramya-rao-a/go-outline \\\n        github.com/acroca/go-symbols \\\n        golang.org/x/tools/cmd/guru \\\n        golang.org/x/tools/cmd/gorename \\\n        github.com/go-delve/delve/cmd/dlv \\\n        github.com/stamblerre/gocode \\\n        github.com/rogpeppe/godef \\\n        golang.org/x/tools/cmd/goimports 2>&1 \\\n    # Clean up.\n    && apt-get autoremove -y \\\n    && apt-get clean -y \\\n    && rm -rf /var/lib/apt/lists/* \\\n    && go env -w GO111MODULE=on\n\n# Revert workaround at top layer.\nENV DEBIAN_FRONTEND=dialog\n\n# Expose service ports.\nEXPOSE 8000\n```\n\n_devcontainer.json_\n\n```json\n{\n  \"dockerFile\": \"./Dockerfile\",\n  \"appPort\": [\"8000:8000\"],\n  \"extensions\": [\"golang.go\"]\n}\n```\n\nFatto questo Visual Studio Code ti chiederà se vuoi aprire il workspace all'interno del container, rispondere di si e attendere che docker crei il container. Probabilmente alla fine del processo vi verrà suggerito di installare alcuni tool di golang, accettate e proseguite.  \nDopo qualche secondo sarà possibile iniziare a sviluppare normalmente.  \nLa cosa bella di questo processo è che i file che scriverete saranno fisicamente sul sistema host, quindi navigabili e gestibile dal file manager, ma tutte le librerie e eseguibili di go saranno all'interno del container.  \nQuesto rende più semplice la gestione delle varie versione di golang e delle dipendenze dei propri progetti.  \nOvviamente tutto questo è possibile utilizzarlo per molti linguaggi di programmazione ad esempio Python, Flutter, C# e molti altri.\n\nSpero di avervi aiutato e fatto scoprire qualcosa di nuovo.  \nCome al solito contattatemi pure nei commenti se avete bisogno di aiuto.\n"}},"__N_SSG":true}