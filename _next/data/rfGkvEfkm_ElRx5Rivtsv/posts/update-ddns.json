{"pageProps":{"source":{"compiledSource":"var m=Object.defineProperty,N=Object.defineProperties;var d=Object.getOwnPropertyDescriptors;var t=Object.getOwnPropertySymbols;var o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;var r=(e,n,s)=>n in e?m(e,n,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[n]=s,a=(e,n)=>{for(var s in n||(n={}))o.call(n,s)&&r(e,s,n[s]);if(t)for(var s of t(n))i.call(n,s)&&r(e,s,n[s]);return e},c=(e,n)=>N(e,d(n));var l=(e,n)=>{var s={};for(var p in e)o.call(e,p)&&n.indexOf(p)<0&&(s[p]=e[p]);if(e!=null&&t)for(var p of t(e))n.indexOf(p)<0&&i.call(e,p)&&(s[p]=e[p]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var p=s,{components:e}=p,n=l(p,[\"components\"]);return mdx(MDXLayout,c(a(a({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"p\",null,\"Eccoci qui con il primo vero post di questo blog.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Oggi ci dedicheremo all'aggiornamento automatico dell'ip del proprio server su alcuni servizi DDNS.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Per fare ci\\xF2 esistono innumerevoli tool, ma perch\\xE9 utilizzare qualcosa di gi\\xE0 fatto quando puoi imparare qualcosa di nuovo?\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"In questo periodo mi sto dilettando con gli script bash, quindi ho deciso di seguire questa strada. Il progetto \\xE8 composto da soli due file, lo script vero e proprio e il file di configurazione, ad essere precisi ce ne sarebbe un terzo, ma viene creato automaticamente dallo script e serve solo per salvare l'ip corrente.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Come detto nel post di benvenuto, questo non vuole essere un blog di tutorial, ma la condivisione delle mie esperienze, quindi vi illustrer\\xF2 come aggiornare gli ip sui due servizi che sto utilizzando al momento.  \"),mdx(\"ul\",null,mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"http://no-ip.com\"}),\"No-Ip\")),mdx(\"li\",{parentName:\"ul\"},mdx(\"a\",a({parentName:\"li\"},{href:\"https://www.duckdns.org/\"}),\"Duck DNS\"),\"  \")),mdx(\"p\",null,\"No-Ip \\xE8 stato il primo servizio che ho utilizzato, offre molte opzioni e molti sotto servizi. Nella versione free \\xE8 possibile registrare solo 3 hostname ed \\xE8 necessario rinnovarli ogni 30 giorni.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Duck DNS invece \\xE8 molto pi\\xF9 scarno, permette la registrazione di domini che terminano solo con \",mdx(\"inlineCode\",{parentName:\"p\"},\".duckdns.org\"),\", ma \\xE8 possibile registrare fino a 5 nomi e non richiede il rinnovo.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Passiamo allo script.\",mdx(\"br\",{parentName:\"p\"}),`\n`,`La parte pi\\xF9 complicata \\xE8 parsare il file di configurazione, ma per fortuna, ovviamente, esiste qualcosa di gi\\xE0 fatto.\nHo utilizzato il metodo descritto in `,mdx(\"a\",a({parentName:\"p\"},{href:\"https://blog.sleeplessbeastie.eu/2019/11/11/how-to-parse-ini-configuration-file-using-bash/\"}),\"questo articolo\"),\".\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Non sto a spiegare come avviene il parse della configurazione perch\\xE9 non \\xE8 oggetto di questo post e il tutto viene gi\\xE0 spiegato nell'articolo linkato. Proseguiamo quindi con la parte da me creata.\"),mdx(\"pre\",a({},{className:\"language-bash\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-bash\",metastring:\"{linenos=true,linenostart=44}\",\"{linenos\":\"true,linenostart\"}),\"GetINISections \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"$1\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"DIRECTORY\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token builtin class-name\"}),\"cd\"),\" `dirname $0` \",mdx(\"span\",a({parentName:\"span\"},{className:\"token operator\"}),\"&&\"),\" \",mdx(\"span\",a({parentName:\"span\"},{className:\"token builtin class-name\"}),\"pwd\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"filename\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$DIRECTORY\"),'/currentip.txt\"'),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!\"),\" -e \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"$filename\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"then\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token function\"}),\"touch\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"$filename\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fi\"),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"oldip\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"cat\"),\" $filename\",mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"currentip\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"curl\"),\" -s \",mdx(\"span\",a({parentName:\"span\"},{className:\"token string\"}),\"'http://ip1.dynupdate.no-ip.com/'\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$2\"),'\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"==\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"--force\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"then\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"oldip\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"\"'),` \n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fi\"),`\n`)),mdx(\"p\",null,\"La prima riga dello script va proprio a leggere il file di configurazione, che vedremo in seguito, il cui path viene passato come primo parametro allo script.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Nelle righe successive viene:\",mdx(\"br\",{parentName:\"p\"}),`\n`,`1) inizializzato il path del file in cui viene salvato l'ultimo ip\n1) letto l'ip dal file\n1) recuperato l'ip corrente tramite l'api messa a disposizione da no-ip e salvato nella variabile `,mdx(\"inlineCode\",{parentName:\"p\"},\"currentip\"),`\n1) se il secondo parametro passato allo script \\xE8 `,mdx(\"inlineCode\",{parentName:\"p\"},\"--force\"),\", viene svuotato il valore dell'ultimo ip.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Vedremo in seguito il perch\\xE9.\"),mdx(\"h3\",a({},{id:\"no-ip\"}),mdx(\"a\",a({parentName:\"h3\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#no-ip\"}),mdx(\"span\",a({parentName:\"a\"},{className:\"icon icon-link\"}))),\"No-Ip\"),mdx(\"p\",null,`Per questo servizio \\xE8 necessario utilizzare username e password utilizzati per loggarsi al sito e gli hostname che si vogliono aggiornare.\nQuesti se pi\\xF9 di uno, basta separarli da virgola. E' anche possibile utilizzare i gruppi presenti su no-ip, passando il nome del gruppo verranno aggiornati automaticamente tutti gli hostname che ne fanno parte.`),mdx(\"pre\",a({},{className:\"language-ini\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-ini\",metastring:\"{linenos=true,linenostart=5}\",\"{linenos\":\"true,linenostart\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token selector\"}),\"[NoIp]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"domains\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"=\"),\"<NOME_DOMINIO>\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"username\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"=\"),\"<USERNAME>\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"password\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"=\"),\"<PASSWORD>\"),`\n`)),mdx(\"p\",null,`Nello script bash viene semplicemente chiamata l'api, tramite curl, messa a disposizione da no-ip, passando i dati necessari.\nIl metodo effettua la chiamata solo se \\xE8 presente una dominio per no-ip nel file di configurazione.`),mdx(\"pre\",a({},{className:\"language-bash\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-bash\",metastring:\"{linenos=true,linenostart=61}\",\"{linenos\":\"true,linenostart\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token function-name function\"}),\"updateNoIp\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" -n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"${configuration_noip[\"'),\"domains\",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"]}\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"then\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"domains\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"${configuration_noip\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"[\"),'\"domains\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"]\"),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"username\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"${configuration_noip\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"[\"),'\"username\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"]\"),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"password\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"${configuration_noip\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"[\"),'\"password\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"]\"),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"urlnoip\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"https://dynupdate.no-ip.com/nic/update?hostname=',mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$domains\"),\"&myip=\",mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$currentip\"),'\"'),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"curl\"),\" -s --user $username:$password $urlnoip\",mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fi\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"h3\",a({},{id:\"duckdns\"}),mdx(\"a\",a({parentName:\"h3\"},{\"aria-hidden\":\"true\",tabIndex:-1,href:\"#duckdns\"}),mdx(\"span\",a({parentName:\"a\"},{className:\"icon icon-link\"}))),\"DuckDns\"),mdx(\"p\",null,`Per questo servizio \\xE8 sufficiente recuperare il token presente nella pagina principale una volta loggati e gli hostname che si vogliono aggiornare.\nTrovate un esempio qui sotto.`),mdx(\"p\",null,mdx(\"img\",a({parentName:\"p\"},{src:\"https://res.cloudinary.com/drg2utgxr/image/upload/v1600434391/posts/update-ddns/duckdns_01.png\",alt:\"Duckdns\"}))),mdx(\"p\",null,`Recuperati questi dati il file di configurazione va compilato come segue.\nSe gli hostname da aggiornare sono pi\\xF9 di uno basta scriverli separati da virgola.`),mdx(\"pre\",a({},{className:\"language-ini\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-ini\",metastring:\"{linenos=true}\",\"{linenos\":\"true}\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token selector\"}),\"[DuckDns]\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"domains\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"=\"),\"<NOME_DOMINIO>\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token constant\"}),\"token\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token attr-value\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"=\"),\"<TOKEN>\"),`\n`)),mdx(\"p\",null,\"Anche in questo caso \\xE8 sufficiente chiamare l'api fornita.\"),mdx(\"pre\",a({},{className:\"language-bash\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-bash\",metastring:\"{linenos=true,linenostart=72}\",\"{linenos\":\"true,linenostart\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token function-name function\"}),\"updateDuckDns\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"(\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\")\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" -n \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"${configuration_duckduck[\"'),\"domains\",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"]}\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"then\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"domains\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"${configuration_duckduck\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"[\"),'\"domains\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"]\"),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"token\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"${configuration_duckduck\",mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"[\"),'\"token\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token punctuation\"}),\"]\"),\"}\"),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token assign-left variable\"}),\"urlduckduck\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"=\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"https://www.duckdns.org/update?domains=',mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$domains\"),\"&token=\",mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$token\"),\"&ip=\",mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$currentip\"),'\"'),`\n    `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$(\"),mdx(\"span\",a({parentName:\"span\"},{className:\"token function\"}),\"curl\"),\" -s $urlduckduck\",mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\")\")),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fi\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",null,\"L'ultima parte dello script \\xE8 la parte che gestisce il tutto.\",mdx(\"br\",{parentName:\"p\"}),`\n`,`Se l'ip letto dal file \\xE8 diverso da quello attuale vengono chiamate le singole funzioni per i servizi e aggiornato l'ip nel file (rig. 83), altrimenti non viene eseguita nessuna operazione.\nPassando allo script come secondo parametro `,mdx(\"inlineCode\",{parentName:\"p\"},\"--force\"),\", come detto in precedenza, viene svuotato il valore di \",mdx(\"inlineCode\",{parentName:\"p\"},\"$oldip\"),\" quindi l'aggiornamento verr\\xE0 fatto indipendentemente dal valore letto dal file.\"),mdx(\"pre\",a({},{className:\"language-bash\"}),mdx(\"code\",a({parentName:\"pre\"},{className:\"language-bash\",metastring:\"{linenos=true,linenostart=81}\",\"{linenos\":\"true,linenostart\"}),mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"if\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"[\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$oldip\"),'\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\"!=\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),'\"',mdx(\"span\",a({parentName:\"span\"},{className:\"token variable\"}),\"$currentip\"),'\"'),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\"]\"),mdx(\"span\",a({parentName:\"code\"},{className:\"token punctuation\"}),\";\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"then\"),`\n  updateNoIp\n  updateDuckDns\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"$currentip\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token operator\"}),\">\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token variable\"}),\"$filename\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"else\"),`\n  `,mdx(\"span\",a({parentName:\"code\"},{className:\"token builtin class-name\"}),\"echo\"),\" \",mdx(\"span\",a({parentName:\"code\"},{className:\"token string\"}),\"'Not changed'\"),`\n`,mdx(\"span\",a({parentName:\"code\"},{className:\"token keyword\"}),\"fi\"),`\n`)),mdx(\"p\",null,\"Questo script lo utilizzo sul mio nas di casa su cui girano alcuni servizi accessibili da internet, per richiamarlo l'ho schedulato ogni 30 minuti con cron.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"E con questo \\xE8 tutto, al momento non utilizzo altri servizi per cui il mio script si ferma qui. Suppongo che funzionino pi\\xF9 o meno allo stesso modo, quindi non dovrebbe essere complicato integrarne altri.\",mdx(\"br\",{parentName:\"p\"}),`\n`,\"Il codice \\xE8 disponibile a questo \",mdx(\"a\",a({parentName:\"p\"},{href:\"https://github.com/simon020286/update-ddns\"}),\"repository\"),\" di GitHub, siete liberi di proporre modifiche e aggiunte.\"),mdx(\"p\",null,\"Buon divertimento\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"post":{"slug":"update-ddns","title":"Update Ddns","date":"2020-09-17T14:59:50.000Z","description":null,"image":null,"tags":["bash","ddns","self-hosted"],"content":"\nEccoci qui con il primo vero post di questo blog.  \nOggi ci dedicheremo all'aggiornamento automatico dell'ip del proprio server su alcuni servizi DDNS.  \nPer fare ciò esistono innumerevoli tool, ma perché utilizzare qualcosa di già fatto quando puoi imparare qualcosa di nuovo?  \nIn questo periodo mi sto dilettando con gli script bash, quindi ho deciso di seguire questa strada. Il progetto è composto da soli due file, lo script vero e proprio e il file di configurazione, ad essere precisi ce ne sarebbe un terzo, ma viene creato automaticamente dallo script e serve solo per salvare l'ip corrente.  \nCome detto nel post di benvenuto, questo non vuole essere un blog di tutorial, ma la condivisione delle mie esperienze, quindi vi illustrerò come aggiornare gli ip sui due servizi che sto utilizzando al momento.  \n+ [No-Ip](http://no-ip.com)\n+ [Duck DNS](https://www.duckdns.org/)  \n\nNo-Ip è stato il primo servizio che ho utilizzato, offre molte opzioni e molti sotto servizi. Nella versione free è possibile registrare solo 3 hostname ed è necessario rinnovarli ogni 30 giorni.  \nDuck DNS invece è molto più scarno, permette la registrazione di domini che terminano solo con `.duckdns.org`, ma è possibile registrare fino a 5 nomi e non richiede il rinnovo.  \nPassiamo allo script.  \nLa parte più complicata è parsare il file di configurazione, ma per fortuna, ovviamente, esiste qualcosa di già fatto.\nHo utilizzato il metodo descritto in [questo articolo](https://blog.sleeplessbeastie.eu/2019/11/11/how-to-parse-ini-configuration-file-using-bash/).  \nNon sto a spiegare come avviene il parse della configurazione perché non è oggetto di questo post e il tutto viene già spiegato nell'articolo linkato. Proseguiamo quindi con la parte da me creata.\n\n```bash {linenos=true,linenostart=44}\nGetINISections $1\n\nDIRECTORY=$(cd `dirname $0` && pwd)\n\nfilename=\"$DIRECTORY/currentip.txt\"\n\nif [[ ! -e $filename ]]; then\n    touch $filename\nfi\n\noldip=$(cat $filename)\ncurrentip=$(curl -s 'http://ip1.dynupdate.no-ip.com/')\n\nif [ \"$2\" == \"--force\" ]; then\n  oldip=\"\" \nfi\n```\n\nLa prima riga dello script va proprio a leggere il file di configurazione, che vedremo in seguito, il cui path viene passato come primo parametro allo script.  \nNelle righe successive viene:  \n1) inizializzato il path del file in cui viene salvato l'ultimo ip\n1) letto l'ip dal file\n1) recuperato l'ip corrente tramite l'api messa a disposizione da no-ip e salvato nella variabile `currentip`\n1) se il secondo parametro passato allo script è `--force`, viene svuotato il valore dell'ultimo ip.  \nVedremo in seguito il perché.\n\n\n### No-Ip\nPer questo servizio è necessario utilizzare username e password utilizzati per loggarsi al sito e gli hostname che si vogliono aggiornare.\nQuesti se più di uno, basta separarli da virgola. E' anche possibile utilizzare i gruppi presenti su no-ip, passando il nome del gruppo verranno aggiornati automaticamente tutti gli hostname che ne fanno parte.\n\n```ini {linenos=true,linenostart=5}\n[NoIp]\ndomains=<NOME_DOMINIO>\nusername=<USERNAME>\npassword=<PASSWORD>\n```\n\nNello script bash viene semplicemente chiamata l'api, tramite curl, messa a disposizione da no-ip, passando i dati necessari.\nIl metodo effettua la chiamata solo se è presente una dominio per no-ip nel file di configurazione.\n\n```bash {linenos=true,linenostart=61}\nupdateNoIp() {\n  if [ -n \"${configuration_noip[\"domains\"]}\" ]; then\n    domains=${configuration_noip[\"domains\"]}\n    username=${configuration_noip[\"username\"]}\n    password=${configuration_noip[\"password\"]}\n    urlnoip=\"https://dynupdate.no-ip.com/nic/update?hostname=$domains&myip=$currentip\"\n    echo $(curl -s --user $username:$password $urlnoip)\n  fi\n}\n```\n\n### DuckDns\n\nPer questo servizio è sufficiente recuperare il token presente nella pagina principale una volta loggati e gli hostname che si vogliono aggiornare.\nTrovate un esempio qui sotto.\n\n![Duckdns](https://res.cloudinary.com/drg2utgxr/image/upload/v1600434391/posts/update-ddns/duckdns_01.png)\n\nRecuperati questi dati il file di configurazione va compilato come segue.\nSe gli hostname da aggiornare sono più di uno basta scriverli separati da virgola.\n\n```ini {linenos=true}\n[DuckDns]\ndomains=<NOME_DOMINIO>\ntoken=<TOKEN>\n```\n\nAnche in questo caso è sufficiente chiamare l'api fornita.\n\n```bash {linenos=true,linenostart=72}\nupdateDuckDns() {\n  if [ -n \"${configuration_duckduck[\"domains\"]}\" ]; then\n    domains=${configuration_duckduck[\"domains\"]}\n    token=${configuration_duckduck[\"token\"]}\n    urlduckduck=\"https://www.duckdns.org/update?domains=$domains&token=$token&ip=$currentip\"\n    echo $(curl -s $urlduckduck)\n  fi\n}\n```\n\nL'ultima parte dello script è la parte che gestisce il tutto.  \nSe l'ip letto dal file è diverso da quello attuale vengono chiamate le singole funzioni per i servizi e aggiornato l'ip nel file (rig. 83), altrimenti non viene eseguita nessuna operazione.\nPassando allo script come secondo parametro `--force`, come detto in precedenza, viene svuotato il valore di `$oldip` quindi l'aggiornamento verrà fatto indipendentemente dal valore letto dal file.\n\n```bash {linenos=true,linenostart=81}\nif [ \"$oldip\" != \"$currentip\" ]; then\n  updateNoIp\n  updateDuckDns\n  echo $currentip > $filename\nelse\n  echo 'Not changed'\nfi\n```\n\nQuesto script lo utilizzo sul mio nas di casa su cui girano alcuni servizi accessibili da internet, per richiamarlo l'ho schedulato ogni 30 minuti con cron.  \nE con questo è tutto, al momento non utilizzo altri servizi per cui il mio script si ferma qui. Suppongo che funzionino più o meno allo stesso modo, quindi non dovrebbe essere complicato integrarne altri.  \nIl codice è disponibile a questo [repository](https://github.com/simon020286/update-ddns) di GitHub, siete liberi di proporre modifiche e aggiunte.\n\nBuon divertimento"},"_superjson":{"values":{"post.date":["Date"],"post.description":["undefined"],"post.image":["undefined"]}}},"__N_SSG":true}