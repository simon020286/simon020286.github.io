<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on T-Dev</title><link>https://simon020286.github.io/tags/docker/</link><description>Recent content in docker on T-Dev</description><generator>Hugo -- gohugo.io</generator><language>it-IT</language><lastBuildDate>Fri, 06 Aug 2021 09:02:15 +0000</lastBuildDate><atom:link href="https://simon020286.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Visual Studio Code - Docker</title><link>https://simon020286.github.io/posts/2021-01-21-visual-studio-code-docker/</link><pubDate>Fri, 06 Aug 2021 09:02:15 +0000</pubDate><guid>https://simon020286.github.io/posts/2021-01-21-visual-studio-code-docker/</guid><description>Ciao a tutti,
oggi vi mostro il mio ambiente di sviluppo, programmi, linguaggi e tools che utilizzo.
Per prima cosa come IDE (Integrated development environment) utilizzo l&amp;rsquo;ottimo Visual Studio Code di Microsoft.
Trovate tutte le informazioni qui.
In breve è un software multi-piattaforma, infatti lo trovate per Windows, MacOS e Linux, integra il controllo della versione del codice tramite git, esistono un&amp;rsquo;infinità di estensioni per facilitare lo sviluppo.
Grazie alle tantissime estensioni disponibili è possibile programmare in qualsiasi linguaggio, ma in questo articolo vedremo come sviluppare in golang, sfruttando un container docker in cui installare il compilatore e tutto il necessario in modo da non &amp;ldquo;sporcare&amp;rdquo; il computer host.</description><content>&lt;p>Ciao a tutti,&lt;br>
oggi vi mostro il mio ambiente di sviluppo, programmi, linguaggi e tools che utilizzo.&lt;br>
Per prima cosa come IDE (Integrated development environment) utilizzo l&amp;rsquo;ottimo Visual Studio Code di Microsoft.&lt;br>
Trovate tutte le informazioni &lt;a href="https://code.visualstudio.com/">qui&lt;/a>.&lt;br>
In breve è un software multi-piattaforma, infatti lo trovate per Windows, MacOS e Linux, integra il controllo della versione del codice tramite git, esistono un&amp;rsquo;infinità di estensioni per facilitare lo sviluppo.&lt;/p>
&lt;p>&lt;img src="https://res.cloudinary.com/drg2utgxr/image/upload/v1611249440/posts/vcode/home-screenshot-win-lg_vzx2kh.png" alt="visual studio code" title="Visual Studio Code">&lt;/p>
&lt;p>Grazie alle tantissime estensioni disponibili è possibile programmare in qualsiasi linguaggio, ma in questo articolo vedremo come sviluppare in golang, sfruttando un container docker in cui installare il compilatore e tutto il necessario in modo da non &amp;ldquo;sporcare&amp;rdquo; il computer host.&lt;/p>
&lt;p>I prerequisti sono pochissimi, aver installato Docker, Visual Studio Code e l&amp;rsquo;estensione Remote - Containers.
Fatto questo basterà creare la cartella del proprio progetto e al suo interno una cartella chiamata &lt;em>.devcontainer,&lt;/em>&lt;br>
all&amp;rsquo;interno di essa i seguenti file:&lt;/p>
&lt;p>&lt;em>Dockerfile&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> golang:1.16&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> DEBIAN_FRONTEND&lt;span style="color:#f92672">=&lt;/span>noninteractive
&lt;span style="color:#66d9ef">RUN&lt;/span> apt-get update &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get -y install --no-install-recommends apt-utils 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Verify git, process tools, lsb-release (common in install instructions for CLIs) installed.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apt-get -y install git iproute2 procps lsb-release&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Install Go tools.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go env -w GO111MODULE&lt;span style="color:#f92672">=&lt;/span>off &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get update &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#75715e"># Install gocode-gomod.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> go get -x -d github.com/stamblerre/gocode 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> go build -o gocode-gomod github.com/stamblerre/gocode &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> mv gocode-gomod $GOPATH/bin/ &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#75715e"># Install other tools.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> go get -u &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> golang.org/x/tools/gopls &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/stamblerre/gocode &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/uudashr/gopkgs/cmd/gopkgs &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/ramya-rao-a/go-outline &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/acroca/go-symbols &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> golang.org/x/tools/cmd/guru &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> golang.org/x/tools/cmd/gorename &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/go-delve/delve/cmd/dlv &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/stamblerre/gocode &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> github.com/rogpeppe/godef &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> golang.org/x/tools/cmd/goimports 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#75715e"># Clean up.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get autoremove -y &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> apt-get clean -y &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> rm -rf /var/lib/apt/lists/* &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> go env -w GO111MODULE&lt;span style="color:#f92672">=&lt;/span>on&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#75715e"># Revert workaround at top layer.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">ENV&lt;/span> DEBIAN_FRONTEND&lt;span style="color:#f92672">=&lt;/span>dialog
&lt;span style="color:#75715e"># Expose service ports.&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 8000&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>devcontainer.json&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;dockerFile&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;./Dockerfile&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;appPort&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;8000:8000&amp;#34;&lt;/span>
],
&lt;span style="color:#f92672">&amp;#34;extensions&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;golang.go&amp;#34;&lt;/span>
]
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Fatto questo Visual Studio Code ti chiederà se vuoi aprire il workspace all&amp;rsquo;interno del container, rispondere di si e attendere che docker crei il container. Probabilmente alla fine del processo vi verrà suggerito di installare alcuni tool di golang, accettate e proseguite.&lt;br>
Dopo qualche secondo sarà possibile iniziare a sviluppare normalmente.&lt;br>
La cosa bella di questo processo è che i file che scriverete saranno fisicamente sul sistema host, quindi navigabili e gestibile dal file manager, ma tutte le librerie e eseguibili di go saranno all&amp;rsquo;interno del container.&lt;br>
Questo rende più semplice la gestione delle varie versione di golang e delle dipendenze dei propri progetti.&lt;br>
Ovviamente tutto questo è possibile utilizzarlo per molti linguaggi di programmazione ad esempio Python, Flutter, C# e molti altri.&lt;/p>
&lt;p>Spero di avervi aiutato e fatto scoprire qualcosa di nuovo.&lt;br>
Come al solito contattatemi pure nei commenti se avete bisogno di aiuto.&lt;/p></content></item></channel></rss>